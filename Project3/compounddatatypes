//Compound Data Types : 4 Groups
//arrays, tuples, strings/slice string

// Arrays = fixed size collection of elements of the same types of homogeneous types

fn main(){     //      number of the total number or entity
    let numbers: [i32; 6] = [1,2,3,4,5,6]; // not [1,2,3,"Alice",4]; but ["Alice","Jeremy","Gabin"];
    println!("Number Arraway: {:?}", numbers);
    let fruits: [&str; 3] = ["Apple", "Banana", "Orange"];
                                         //Display fruit number 2
    println!("Fruits Array: {:?}", fruits[2]);
// Tuples = heterogenous collection of element of fixed size
    let human = ("Alice", 30, false);
    println!("Human Tuple: {:?}", human);
                                            //include array
    let my_mix_tuples = ("Kratos", 34, true, [1,2,3,4,5]);
    println!("my_mix_tuples: {:?}", my_mix_tuples);

// Slices: dynamically sized view into a contagious sequence of elements
    let number_slices :&[i32] = &[1,2,3,4,5];
    println!("Number Slice: {:?}", number_slices);
    let animal_slice :&[&str] =&["cow" ,"cat" ,"dog"];
    println!("Animal Slice: {:?}", animal_slice);
    let book_slices :&[&String] = &[&"IT".to_string(),&"Harry Potter".to_string(),&"ZEN".to_string()];
    println!("Book Slice: {:?}", book_slices); //string Slices

    //Strings Vs String Slices (&str)
    //  Strings = growable, mutable, owned string types => not fixed so slow but useful to modifiy
    //  Immutable by defualt so we need to add "mut" after let
    let mut stone_cold: String = String::from("Hell, ");
    println!("Stone Cold Says: {}", stone_cold);
    stone_cold.push_str("Yeah!");
    println!("Stone Cold Says: {}", stone_cold);

    //&str = reference to a portion (not a own string) that is stored somewhere in our code +
    //immutable => good for memory because don't need to copy => fast
    let string: String = String::from("Hello, World");
    let slice: &str = &string; //reference to the string, not copy
    println!("Slice Value: {}", slice);
    let slice: &str = &string[0..6]; //display the 5 first character of "Hello, World"
    println!("Slice Value: {}", slice);
}
//rust erase memory variable after end of function, so we can't made a reference, need to recreate (error : out of
//scope)
